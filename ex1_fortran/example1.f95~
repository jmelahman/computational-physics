!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	EXAMPLE 1: SEMICLASSICAL QUATIZATION OF MOLECULAR VIBRATIONS
!	WRITTEN BY JAMISON LAHMAN WITH REFERENCE TO STEVEN KOONIN
!	AND DAWN MEREDITH'S COMPUTATIONAL PHYSICS.
!
!	FINDS THE BOUND STATES OF A LENNARD-JONES POTENTIAL
! 	USING THE BOHR-SOMMERFELD QUANTIZATION RULE
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
PROGRAM EXAMPLE1
IMPLICIT NONE
    REAL, PARAMETER :: PI=4.*ATAN(1.)
	REAL :: GAMMA						!MEASURE OF QUANTUM NATURE
	REAL :: BETA                        !ADJUSTS MORSE POTENTIAL
	REAL :: E							!SCALED ENERGY
	REAL :: XIN,XOUT				    !VALUES OF X
	REAL :: XMIN                        !X VALUE OF POTENIAL MIN
	REAL :: S                           !AREA OF PHASE TRAJECTORY
	REAL :: F 							!(N+1/2)*PI
	REAL :: POT							!POTENTIAL FUNCTION
	INTEGER :: N						!ENERGY STATE
	INTEGER :: NMAX              		!MAX # OF ENERGY STATES
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	MAKE SURE THAT THE BOTTOM OF THE WELL IS NORMALIZED TO -1 AND
!	XMIN OCCURS AT THE MINIMUM OF POT(X).
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
50	E = -1.
!	XMIN = 2.**(1./6.)
!	XMIN = 0
	XMIN = .74166
!	BETA = 1.25231934
	BETA = 1.40698099
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	SINCE THE BOTTOM OF THE WELL IS NORMALIZED TO -1 (V(XMIN)=-1),
!   BEGINNING WITH AN ENERGY OF -1 (E=-1) ENSURES THE ACTION IS ZERO.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    PRINT *,'ENTER THE VALUE OF GAMMA:'
    READ *,GAMMA
    CALL FIND_NMAX(XMIN,GAMMA,BETA,NMAX)
    IF (NMAX < 0) THEN
        PRINT *,'PLEASE ENTER A LARGER GAMMA'
        GO TO 50
    END IF
    DO N=0,NMAX
        F = (N+0.5)*PI
        CALL FIND_E(E,XIN,XOUT,XMIN,GAMMA,BETA,F)
        PRINT *,'N',N,'ENERGY',E*4.747,'XIN',XIN,'XOUT',XOUT
    END DO
    GO TO 50
END PROGRAM EXAMPLE1

SUBROUTINE FIND_NMAX(XMIN,GAMMA,BETA,NMAX)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!	FINDS THE NUMBER OF ENERGY STATES WHICH CAN BE SATISFIED WITH
!   GIVEN GAMMA VALUES. IF NO PHASE SPACE TRAJECTORY CAN SATISFY
!   THE INTITAL VALUE OF PI/2, NMAX IS PASSED AS -1 & USER IS ASKED
!   TO ENTER A NEW VALUE FOR GAMMA.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    REAL, PARAMETER :: PI=4.*ATAN(1.)
    REAL :: XIN,XOUT              !INTEGRAL LIMITS
    REAL :: XMIN                  !MINIMUM OF POTENTIAL FUNCTION
    REAL :: S                     !AREA OF PHASE SPACE TRAJECTORY
    REAL :: E                     !ENERY OF THE BOUND STATE I/O
    REAL :: F                     !(N+1/2)*PI
    REAL :: POT                   !POTENTIAL FUNCTION
    REAL :: GAMMA                 !GAMMA (INPUT)
    REAL :: BETA                  !INPUT PARAMETER
    INTEGER :: I                  !COUNTER
!
    E = -0.0001                   !MINIMUM ENERGY ALLOWED
    CALL TURNINGPOINT(E,XIN,XOUT,XMIN,BETA)
    CALL CALC_S(E,XIN,XOUT,XMIN,GAMMA,BETA,S)
!    CALL GAUSS_S(E,XIN,XOUT,XMIN,GAMMA,BETA,S)
    DO I=0,100
        F = (I+0.5)*PI
        IF (F > S) THEN
            NMAX = I-1
            RETURN
        END IF
    END DO
END SUBROUTINE FIND_NMAX

SUBROUTINE FIND_E(E,XIN,XOUT,XMIN,GAMMA,BETA,F)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   GUESSES AN ENERGY, FINDS THE TURNING POINTS,SOLVES EQUATION 1.22
!   THEN EITHER GUESSES ANOTHER ENERGY BASED OFF THE PREVIOUS OR
!   RETURNS IF S(E) IS CLOSE ENOUGH TO (N+.5)*PI
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IMPLICIT NONE
    REAL :: XIN,XOUT              !INTEGRAL LIMITS
    REAL :: XMIN                  !MINIMUM OF POTENTIAL FUNCTION
    REAL :: S                     !AREA OF PHASE SPACE TRAJECTORY
    REAL :: E                     !ENERY OF THE BOUND STATE I/O
    REAL :: F                     !(N+1/2)*PI
    REAL :: POT                   !POTENTIAL FUNCTION
    REAL :: GAMMA                 !GAMMA (INPUT)
    REAL :: BETA                  !INPUT PARAMETER
    REAL :: TOLE                  !TOLERANCE FOR FINDING E
    REAL :: DE                    !INITIAL STEP FOR FINDING E
    INTEGER :: I                  !COUNTER
    TOLE = .0000001
    DE = .002
    DO WHILE (DE > TOLE)
        E = E+DE
        CALL TURNINGPOINT(E,XIN,XOUT,XMIN,BETA)
!        CALL NEWTONRAPHSON(E,XIN,XOUT,XMIN,BETA)
        CALL CALC_S(E,XIN,XOUT,XMIN,GAMMA,BETA,S)
!        CALL GAUSS_S(E,XIN,XOUT,XMIN,GAMMA,BETA,S)
        IF (S > F-.00000001) THEN         !ACCURACY FOR FINDING S(E)
            E = E-DE
            DE = DE-DE/1.99
        END IF
    END DO
END SUBROUTINE FIND_E

SUBROUTINE CALC_S(E,XIN,XOUT,XMIN,GAMMA,BETA,S)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   USES BODE'S EQUATION TO ESTIMATE THE STANDARDIZED ACTION GIVEN
!   BY EQUATION 1.22 IN THE TEXT
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IMPLICIT NONE
    REAL :: XIN,XOUT              !INTEGRAL LIMITS
    REAL :: XMIN                  !MINIMUM OF THE POTENTIAL
    REAL :: H,VAL,SUM             !INTEGRAL VARIABLES
    REAL :: S                     !AREA OF PHASE SPACE TRAJECTORY
    REAL :: E                     !ENERY OF THE BOUND STATE (INPUT)
    REAL :: POT                   !POTENTIAL FUNCTION
    REAL :: GAMMA                 !GAMMA (INPUT)
    REAL :: BETA                  !INPUT PARAMETER
    INTEGER :: I                  !COUNTER
!
    H = (XOUT-XIN)/2000.
    SUM = 0.0
    DO I=0,2000
        S = SQRT(E-POT(BETA,XIN+I*H,XMIN))
        VAL = 0.0
        IF (I == 0 .OR. I == 2000) THEN
            VAL = 14.*H*S/45.
        ELSE IF (MOD(I,2) == 1) THEN
            VAL = 64.*H*S/45.
        ELSE IF (MOD(I,4) == 2) THEN
            VAL = 24.*H*S/45.
        ELSE
            VAL = 28.*H*S/45.
        END IF
        SUM = SUM+VAL
    END DO
    S = GAMMA*SUM
    RETURN
END SUBROUTINE CALC_S

SUBROUTINE GAUSS_S(E,XIN,XOUT,XMIN,GAMMA,BETA,S)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   USES GAUSSIAN QUADRATURE TO ESTIMATE THE STANDARDIZED ACTION
!   GIVEN BY EQUATION 1.22 IN THE TEXT
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IMPLICIT NONE
    REAL, DIMENSION(64)  :: XI,WI !ABSCISSAS AND WEIGHTS
    REAL :: GAMMA                 !GAMMA (CONSTANT)
    REAL :: XIN,XOUT              !INTEGRAL LIMITS
    REAL :: XMIN                  !MINIMUM OF POTENTIAL
    REAL :: VAL                   !INTEGRAL VARIABLES
    REAL :: S                     !AREA OF PHASE SPACE TRAJECTORY
    REAL :: E                     !ENERY OF THE BOUND STATE (INPUT)
    REAL :: POT                   !POTENTIAL (FUNCTION)
    REAL :: BETA                  !INPUT PARAMETER
    REAL :: X                     !LOCAL VARIABLE
    INTEGER :: I                  !COUNTER
!
    S = 0.0
	CALL FILL64(XI,WI)
    DO I=1,64
        X = (XI(I)+1.)*(XOUT-XIN)/2.+XIN
!DX=(XOUT-XIN)/2*DXI
        VAL = SQRT(E-POT(BETA,X,XMIN))*(XOUT-XIN)/2.
        S = S+VAL*WI(I)
    END DO
    S = GAMMA*S
    RETURN
END SUBROUTINE GAUSS_S

SUBROUTINE TURNINGPOINT(E,XIN,XOUT,XMIN,BETA)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   SINCE P(R) = SQRT(2M(E-V(R))) AND THE TURNING POINTS OCCUR
!   WHEN P(R) = 0, THAT IMPLIES E = V. THIS SUBROUTINE FINDS WHEN
!   THE POTENTIAL FUNCTION EQUALS THE ENERGY WHICH IN TURN GIVES
!   THE VALUE OF X_IN AND X_OUTUSING THE SEARCH METHOD.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IMPLICIT NONE
    REAL :: DX                  !STEP FOR INTITAL SEARCH
    REAL :: X                   !LOCAL VARIABLE
    REAL :: XMIN                !X VALUE FOR POTENTAL MINIMUM
    REAL :: E                   !ENERGY (INPUT)
    REAL :: XIN,XOUT            !TURNING POINTS (OUTPUT)
    REAL :: BETA                !BETA FOR THE MORSE POTENTIAL
    REAL :: POT                 !POTENTIAL FUNCTION
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   USES THE SEARCH ALGORITHM TO FIND THE ROOT OF P(X_IN)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    DX = .1
    X=XMIN
    DO WHILE (DX > .00001)
        X = X+DX
        IF (POT(BETA,X,XMIN) > E) THEN
            X = X-DX
            DX = DX/2.
        END IF
    END DO
    XOUT = X
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   USES THE SEARCH ALGORITH TO FIND THE ROOT OF P(X_OUT)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    DX = .1
    X=XMIN
    DO WHILE (DX > .00001)
        X = X-DX
        IF (POT(BETA,X,XMIN) > E) THEN
            X = X+DX
            DX = DX/2.
        END IF
    END DO
    XIN = X
    RETURN
END SUBROUTINE TURNINGPOINT

SUBROUTINE NEWTONRAPHSON(E,XIN,XOUT,XMIN,BETA)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   SINCE P(R) = SQRT(2M(E-V(R))) AND THE TURNING POINTS OCCUR
!   WHEN P(R) = 0, THAT IMPLIES E = V. THIS SUBROUTINE FINDS WHEN
!   THE POTENTIAL FUNCTION EQUALS THE ENERGY WHICH IN TURN GIVES
!   THE VALUE OF X_IN AND X_OUTUSING THE NEWTON RAPHSON METHOD.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
IMPLICIT NONE
    REAL :: TOLX=.0001          !TOLERANCE FOR SEARCH
    REAL :: E                   !ENERGY (INPUT)
    REAL :: XIN,XOUT            !TURNING POINTS (INPUT/OUTPUT)
    REAL :: XMIN                !MINIMUM OF POTENTIAL FUNCTION
    REAL :: BETA                !INPUT PARAMETER
    REAL :: POT                 !POTENTIAL FUNCTION
    REAL :: POTPRIME            !FIRST DERIVATIVE OF POT FUNCTION
!
10  CONTINUE
    XIN = XIN-(POT(BETA,XIN,XMIN)-E)/POTPRIME(BETA,XIN,XMIN)
    IF (ABS(POT(BETA,XIN,XMIN)-E) > TOLX) GOTO 10
!
20  CONTINUE
    XOUT = XOUT-(POT(BETA,XOUT,XMIN)-E)/POTPRIME(BETA,XOUT,XMIN)
    IF (ABS(POT(BETA,XOUT,XMIN)-E) > TOLX) GOTO 20
    RETURN
END SUBROUTINE NEWTONRAPHSON

REAL FUNCTION POT(BETA,X,XMIN)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   FUNCTION FOR THE POTENTIAL. RETURNS POT FOR A GIVEN VALUE OF X
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    REAL :: X
    REAL :: BETA
    REAL :: XMIN
    POT = (1.-EXP(-BETA*(X-XMIN)))**2-1.
!    POT = (X)**2-1.
!    POT = 4.*(X**(-12)-X**(-6))
    RETURN
END FUNCTION

REAL FUNCTION POTPRIME(BETA,X,XMIN)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!   FUNCTION FOR THE POTENTIAL. RETURNS POT FOR A GIVEN VALUE OF X
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    REAL :: X
    REAL :: BETA
    REAL :: XMIN
!    POTPRIME = 2.*X
    POTPRIME = 4.*(6.*X**(-7)-12.*X**(-13))
    RETURN
END FUNCTION

SUBROUTINE FILL64(XI,WI)
IMPLICIT NONE
    REAL, DIMENSION(64)  :: XI,WI    !ABSCISSAS AND WEIGHTS
    XI(1) = -0.0243502926634244
    XI(2) = 0.0243502926634244
    XI(3) = -0.0729931217877990
    XI(4) = 0.0729931217877990
    XI(5) = -0.1214628192961206
    XI(6) = 0.1214628192961206
    XI(7) = -0.1696444204239928
    XI(8) = 0.1696444204239928
    XI(9) = -0.2174236437400071
    XI(10) = 0.2174236437400071
    XI(11) = -0.2646871622087674
    XI(12) = 0.2646871622087674
    XI(13) = -0.3113228719902110
    XI(14) = 0.3113228719902110
    XI(15) = -0.3572201583376681
    XI(16) = 0.3572201583376681
    XI(17) = -0.4022701579639916
    XI(18) = 0.4022701579639916
    XI(19) = -0.4463660172534641
    XI(20) = 0.4463660172534641
    XI(21) = -0.4894031457070530
    XI(22) = 0.4894031457070530
    XI(23) = -0.5312794640198946
    XI(24) = 0.5312794640198946
    XI(25) = -0.5718956462026340
    XI(26) = 0.5718956462026340
    XI(27) = -0.6111553551723933
    XI(28) = 0.6111553551723933
    XI(29) = -0.6489654712546573
    XI(30) = 0.6489654712546573
    XI(31) = -0.6852363130542333
    XI(32) = 0.6852363130542333
    XI(33) = -0.7198818501716109
    XI(34) = 0.7198818501716109
    XI(35) = -0.7528199072605319
    XI(36) = 0.7528199072605319
    XI(37) = -0.7839723589433414
    XI(38) = 0.7839723589433414
    XI(39) = -0.8132653151227975
    XI(40) = 0.8132653151227975
    XI(41) = -0.8406292962525803
    XI(42) = 0.8406292962525803
    XI(43) = -0.8659993981540928
    XI(44) = 0.8659993981540928
    XI(45) = -0.8893154459951141
    XI(46) = 0.8893154459951141
    XI(47) = -0.9105221370785028
    XI(48) = 0.9105221370785028
    XI(49) = -0.9295691721319396
    XI(50) = 0.9295691721319396
    XI(51) = -0.9464113748584028
    XI(52) = 0.9464113748584028
    XI(53) = -0.9610087996520538
    XI(54) = 0.9610087996520538
    XI(55) = -0.9733268277899110
    XI(56) = 0.9733268277899110
    XI(57) = -0.9833362538846260
    XI(58) = 0.9833362538846260
    XI(59) = -0.9910133714767443
    XI(60) = 0.9910133714767443
    XI(61) = -0.9963401167719553
    XI(62) = 0.9963401167719553
    XI(63) = -0.9993050417357722
    XI(64) = 0.9993050417357722
!
    WI(1) = 0.0486909570091397
    WI(2) = 0.0486909570091397
    WI(3) = 0.0485754674415034
    WI(4) = 0.0485754674415034
    WI(5) = 0.0483447622348030
    WI(6) = 0.0483447622348030
    WI(7) = 0.0479993885964583
    WI(8) = 0.0479993885964583
    WI(9) = 0.0475401657148303
    WI(10) = 0.0475401657148303
    WI(11) = 0.0469681828162100
    WI(12) = 0.0469681828162100
    WI(13) = 0.0462847965813144
    WI(14) = 0.0462847965813144
    WI(15) = 0.0454916279274181
    WI(16) = 0.0454916279274181
    WI(17) = 0.0445905581637566
    WI(18) = 0.0445905581637566
    WI(19) = 0.0435837245293235
    WI(20) = 0.0435837245293235
    WI(21) = 0.0424735151236536
    WI(22) = 0.0424735151236536
    WI(23) = 0.0412625632426235
    WI(24) = 0.0412625632426235
    WI(25) = 0.0399537411327203
    WI(26) = 0.0399537411327203
    WI(27) = 0.0385501531786156
    WI(28) = 0.0385501531786156
    WI(29) = 0.0370551285402400
    WI(30) = 0.0370551285402400
    WI(31) = 0.0354722132568824
    WI(32) = 0.0354722132568824
    WI(33) = 0.0338051618371416
    WI(34) = 0.0338051618371416
    WI(35) = 0.0320579283548516
    WI(36) = 0.0320579283548516
    WI(37) = 0.0302346570724025
    WI(38) = 0.0302346570724025
    WI(39) = 0.0283396726142595
    WI(40) = 0.0283396726142595
    WI(41) = 0.0263774697150547
    WI(42) = 0.0263774697150547
    WI(43) = 0.0243527025687109
    WI(44) = 0.0243527025687109
    WI(45) = 0.0222701738083833
    WI(46) = 0.0222701738083833
    WI(47) = 0.0201348231535302
    WI(48) = 0.0201348231535302
    WI(49) = 0.0179517157756973
    WI(50) = 0.0179517157756973
    WI(51) = 0.0157260304760247
    WI(52) = 0.0157260304760247
    WI(53) = 0.0134630478967186
    WI(54) = 0.0134630478967186
    WI(55) = 0.0111681394601311
    WI(56) = 0.0111681394601311
    WI(57) = 0.0088467598263639
    WI(58) = 0.0088467598263639
    WI(59) = 0.0065044579689784
    WI(60) = 0.0065044579689784
    WI(61) = 0.0041470332605625
    WI(62) = 0.0041470332605625
    WI(63) = 0.0017832807216964
    WI(64) = 0.0017832807216964
    RETURN
END SUBROUTINE
